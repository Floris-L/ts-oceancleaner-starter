import { Game } from './GameLoop.js';
import CanvasUtil from './CanvasUtil.js';
import KeyListener from './KeyListener.js';
import Player from './Player.js';
import ScoreItem from './ScoreItem.js';
import Fish from './Fish.js';
import Waste from './Waste.js';
import GoldenCapsule from './GoldenCapsule.js';
import Interactable from './Interactable.js';
import Computer from './computer.js';
import Prompt from './Prompt.js';
import Scene from './Scene.js';
import SceneStart from './StartingRoom.js';
import Level1 from './ComputerScreen.js';
import FlappyScene from './FlappyScene.js';

export default class MalwareMalvin extends Game {
  private canvas: HTMLCanvasElement;

  private keyListener: KeyListener;

  private scoreItems: ScoreItem[] = [];

  private player: Player;

  private currentScene: Scene;

  public constructor(canvas: HTMLCanvasElement) {
    super();
    this.canvas = canvas;
    this.canvas.height = window.innerHeight;
    this.canvas.width = window.innerWidth;
    this.keyListener = new KeyListener();
    this.currentScene = new SceneStart(this.canvas.width, this.canvas.height);
    // this.currentScene = new FlappyScene(this.canvas.width, this.canvas.height);
  }

  /**
   * processes the input from the keyboard
   */
  public processInput(): void {
    this.currentScene.processInput(this.keyListener);
  }


  /**
   *updates the game state
   * 
   * @param elapsed elapsed time from the game loop
   * @returns true if the game should continue
   */
  public update(elapsed: number): boolean {
    const nextScene = this.currentScene.update(elapsed);
    if (nextScene !== null) this.currentScene = nextScene;
    return true;
  }

  /**
   *
   */
  public render(): void {
    CanvasUtil.clearCanvas(this.canvas);
    this.currentScene.render(this.canvas);
  }
}
